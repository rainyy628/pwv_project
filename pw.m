%PWV project last updated by Rainyy on 2021-3-17
sdhashdjkashjdkhajksdhjakk

clc;
%prf=3800hz ss=200

%Here lies all the variables in the project so you can change them easily.
%File numbers
file_start=0;
file_end=20;
%Signal variables 
processed_signal=[];
Signal_to_process=[];
%log compression arguments
D=203.2;
G=-300.1282;
%number of samples jumped
d=16;
%FFT's size
FFT_size=256;
%Sample's size
Samplesize=128;
%Beta in the Kaiser Window
beta=5.5;
%Dynamic range arguments in display
uprange=539;
downrange=31;
%Power graph
spectrum_power=[];
templ=0;



%This part we divide the whole gates into 32 parts and take the middle
%part to calculate volume flow speed.
interval=floor(width/32);
gate_start=[];
gate_end=[];
for i=0:31
    gate_start=[gate_start;1+interval*i];
    gate_end=[gate_end;(i+1)*interval];
end

%Read files from the folder.
for filenum=file_start:file_end
if filenum<10
    fileid=['IQ_D_0000' num2str(filenum) '.pgm'];
end
if filenum>=10
    fileid=['IQ_D_000' num2str(filenum) '.pgm'];
end
fid=fopen(fileid,'rb+');
%At the beginning of the data file lies some information about the data.
baseinfo=cell(55,1);
readcnt=0;
for i=1:55
    readcnt=readcnt+1;
    baseinfo{readcnt,1}=fscanf(fid, '%s', 1);
end
%Extract information 
frenq=str2double(baseinfo(32))*10^6;
length=fscanf(fid,'%d',1);
width=fscanf(fid,'%d',1);
max_size=fscanf(fid,'%d',1);
fseek(fid, -8*length*width, 1);
data_matrix=fread(fid,[width*2,length],'float');
data_matrix=data_matrix';
fclose(fid);

%Every line includes signals like I_signal, Q_signal... 
%Width is the number of the signals in every line
%Here after we read the raw data from the file, we divide every line into
%several parts and only take the average of the parts in the middle, and we
%save them in the i/q_average
average_i=zeros(length,1);
average_q=zeros(length,1);

i_signal_matrix=zeros(length,width);
q_signal_matrix=zeros(length,width);

for i=1:length
    for j=0:width-1
        i_signal_matrix(i,j+1)=data_matrix(i,j*2+1);
        q_signal_matrix(i,j+1)=data_matrix(i,j*2+2);
    end
end

%power spectrum printing
temp_spectrum_power=[];
dd=10;
gg=50;
for i=1:length
    for j=1:width
        temp_spectrum_power(i,j)=sqrt(q_signal_matrix(i,j)*q_signal_matrix(i,j)+i_signal_matrix(i,j)*i_signal_matrix(i,j));
%         temp_spectrum_power(i,j)=dd*log10(temp_spectrum_power(i,j))+gg;
    end
end
spectrum_power=[spectrum_power;temp_spectrum_power];
% spectrum_power=spectrum_power';
% imshow(spectrum_power,[5000 25000]);
% plot(spectrum_power);


bandwidth=40;
for i=1:length
    for j=width/2-bandwidth:width/2+bandwidth
        average_i(i,1)=average_i(i,1)+i_signal_matrix(i,j)/(bandwidth*2+1);
        average_q(i,1)=average_q(i,1)+q_signal_matrix(i,j)/(bandwidth*2+1);
    end
end
% for i=1:length
%     for j=gate_start(gate_index,1):gate_end(gate_index, 1)
%         average_i(i,1)=average_i(i,1)+i_signal_matrix(i,j)/interval;
%         average_q(i,1)=average_q(i,1)+q_signal_matrix(i,j)/interval;
%     end
% end
%turn the processed data into complex signals.
average_sig=zeros(length,1);
for i=1:length
    average_sig(i,1)=average_i(i,1)+average_q(i,1)*sqrt(-1);
end

Signal_to_process=[Signal_to_process;average_sig];
end
Allfileslength=[];
Allfileslength=size(Signal_to_process(:));


%Here we use wall filters to process the data, the 10 kinds of wall filters
%are as follows. Normally, we choose the fifth kind of wall filter.
D_wall_filters_1 = [ -0.029730126667316694,-0.029782491322362176,-0.029831611446894914,-0.029877460511310145,-0.029920013734110903,-0.029959248099224289,-0.029995142372104808,-0.03002767711457972 ,-0.030056834698451891,-0.030082599317832231,-0.030104957000206309,-0.03012389561621006 ,-0.030139404888129197,-0.030151476397087758,-0.030160103588950871,-0.030165281778911469,0.96983299184522898 ,-0.030165281778911469,-0.030160103588950871,-0.030151476397087758,-0.030139404888129197,-0.03012389561621006 ,-0.030104957000206309,-0.030082599317832231,-0.030056834698451891,-0.03002767711457972 ,-0.029995142372104808,-0.029959248099224289,-0.029920013734110903,-0.029877460511310145,-0.029831611446894914,-0.029782491322362176,-0.029730126667316694];
D_wall_filters_2 = [-0.013022988030986641  , 0.00063281270585265189,0.0114469616935614  ,0.019395369511161494  ,0.024464826947783878  ,0.026644242005863947  ,0.025910284589435013  ,0.022203103115228988  ,0.01538315475609723   ,0.0051491613350603191 ,-0.0091318834430878688 ,-0.028818998427188894  ,-0.057063820036219223  ,-0.10243132767969448   ,-0.19699290959809124   ,-0.63150203522822312   ,0.63150203522822312   ,0.19699290959809124   ,0.10243132767969448   ,0.057063820036219223  ,0.028818998427188894  ,0.0091318834430878688 ,-0.0051491613350603191 ,-0.01538315475609723   ,-0.022203103115228988  ,-0.025910284589435013  ,-0.026644242005863947  ,-0.024464826947783878  ,-0.019395369511161494  ,-0.0114469616935614   ,-0.00063281270585265189,0.013022988030986641 ];
%0.035 0.06 10000
D_wall_filters_3 = [-0.027793012069660273  ,-0.0093816510130177982 ,0.0057761391229634871 ,0.017577576804186416  ,0.025947515675988804  ,0.030830502843402729  ,0.032176887196240053  ,0.029918627973451205  ,0.023925839307638835  ,0.013924085196789511 ,-0.00067663847488998174,-0.021177558560285553  ,-0.050659417474085075  ,-0.097605169212051979  ,-0.19399525703682285   ,-0.63048569162340051   ,0.63048569162340051   ,0.19399525703682285   ,0.097605169212051979  ,0.050659417474085075  ,0.021177558560285553  ,0.00067663847488998174,-0.013924085196789511  ,-0.023925839307638835  ,-0.029918627973451205  ,-0.032176887196240053  ,-0.030830502843402729  ,-0.025947515675988804  ,-0.017577576804186416  ,-0.0057761391229634871 ,0.0093816510130177982 ,0.027793012069660273 ]; 
%0.04 0.07 10000
D_wall_filters_4 = [-0.033921942657285591 ,-0.014392411443565744 ,0.0022077567593130837,0.01562515171458782  ,0.025646315713268714 ,0.032093547378506442 ,0.034814155810665763 ,0.033658701988055255 ,0.028439174548977299 ,0.01884705423122042  , 0.0042821745545711318,-0.016543941356871754 ,-0.046678232965798282 ,-0.09455144038406306  ,-0.19207670928412868  ,-0.62983155813063652  ,0.62983155813063652  ,0.19207670928412868  ,0.09455144038406306  ,0.046678232965798282 ,0.016543941356871754 ,-0.0042821745545711318,-0.01884705423122042  ,-0.028439174548977299 ,-0.033658701988055255 ,-0.034814155810665763 ,-0.032093547378506442 ,-0.025646315713268714 ,-0.01562515171458782  ,-0.0022077567593130837,0.014392411443565744 ,0.033921942657285591 ];
%0.045 0.075 10000
D_wall_filters_5 = [-0.035655000746366773  ,-0.016593917263646639  ,0.000085446194567474418,0.013980654794624911   ,0.024736247566057308   ,0.032044017270591432   ,0.03563618896280802    ,0.035266880606141596   ,0.030672665807391832   , 0.021492098497224818   ,0.00709505004471888    ,-0.013814477930193303   ,-0.044270005064483371   ,-0.09267031861811692    ,-0.19088129063040488    ,-0.62942172181693468    ,0.62942172181693468    ,0.19088129063040488    ,0.09267031861811692    ,0.044270005064483371   ,0.013814477930193303   ,-0.00709505004471888    ,-0.021492098497224818   ,-0.030672665807391832   ,-0.035266880606141596   ,-0.03563618896280802    ,-0.032044017270591432   ,-0.024736247566057308   ,-0.013980654794624911   ,-0.000085446194567474418,0.016593917263646639   ,0.035655000746366773];
%0.05 0.08 10000
D_wall_filters_6 = [-0.024124236105293188 ,-0.016869049419661948 ,-0.0067933217840863208 ,0.0045473973848319874,0.015706064451392769 ,0.025373977286343066 ,0.032398706175242493 ,0.035784823177792573 ,0.03466774738553071  ,0.028240258921520028 ,0.015582432747433277 ,-0.0047412312037655819,-0.035765097876615949 ,-0.085767212749398192 ,-0.18639291021051649  ,-0.6278663005289542   ,0.6278663005289542   , 0.18639291021051649  , 0.085767212749398192 , 0.035765097876615949 , 0.0047412312037655819,-0.015582432747433277 ,-0.028240258921520028 ,-0.03466774738553071  ,-0.035784823177792573 ,-0.032398706175242493 ,-0.025373977286343066 ,-0.015706064451392769 ,-0.0045473973848319874,0.0067933217840863208,0.016869049419661948 ,0.024124236105293188];
%0.06 0.09 100000
D_wall_filters_7 = [ 0.0083917421169536852,-0.012587108560381425 ,-0.019646161060719716 ,-0.016308670500554276 ,-0.0060927621643639346,0.0076282521242187805,0.021745392320075049 ,0.033503721552438012 ,0.040548874883541725 ,0.04090707960221248  ,0.032847481120936613 ,0.014489640849650563 ,-0.0172912552252571   ,-0.070541373638349225 ,-0.17640245928718734  ,-0.62438930451453312  ,0.62438930451453312  ,0.17640245928718734  ,0.070541373638349225 ,0.0172912552252571   ,-0.014489640849650563 ,-0.032847481120936613 ,-0.04090707960221248  ,-0.040548874883541725 ,-0.033503721552438012 ,-0.021745392320075049 ,-0.0076282521242187805,0.0060927621643639346,0.016308670500554276 ,0.019646161060719716 ,0.012587108560381425 ,-0.0083917421169536852];
%0.07 0.1 100000
D_wall_filters_8 = [ 0.028059672864906231 ,-0.0079568897076024402,-0.025479937496843998 ,-0.028073666810338127 ,-0.019710394348296197 ,-0.0045275271813640453,0.013405322934181887 ,0.030291059094916903 ,0.042760176541087172 ,0.047945568224335183 ,0.043419827205666429 ,0.026853500468024816 ,-0.0050556801117704973,-0.060262963740350395 ,-0.16957965042198753  ,-0.62200160790810743  ,0.62200160790810743  , 0.16957965042198753  ,0.060262963740350395 ,0.0050556801117704973,-0.026853500468024816 ,-0.043419827205666429 ,-0.047945568224335183 ,-0.042760176541087172 ,-0.030291059094916903 ,-0.013405322934181887 ,0.0045275271813640453,0.019710394348296197 ,0.028073666810338127 ,0.025479937496843998 ,0.0079568897076024402,-0.028059672864906231 ];
%0.075 0.12 100000
D_wall_filters_9= [ 0.030337199368958352 ,-0.0052071456808114565 ,-0.024318054498218861 ,-0.029168445302032234  ,-0.02273643397446436   ,-0.0085725515171741345 ,0.0094639038595202285 ,0.027474760019832092  ,0.041767714081227016  ,0.04903321551080049   ,0.046383418312517716  ,0.031099540744040564  ,-0.00037234680288161445,-0.05606424421213399   ,-0.16668414779842802   ,-0.62097007606274779   ,0.62097007606274779   ,0.16668414779842802   ,0.05606424421213399   ,0.00037234680288161445,-0.031099540744040564  ,-0.046383418312517716  ,-0.04903321551080049   ,-0.041767714081227016  ,-0.027474760019832092  ,-0.0094639038595202285 ,0.0085725515171741345 ,0.02273643397446436   ,0.029168445302032234  ,0.024318054498218861  ,0.0052071456808114565 ,-0.030337199368958352  ];
%0.08 0.13 1000000
D_wall_filters_10 = [0.026334761341238758 ,-0.015356073285987629 ,-0.028303577666037801 ,-0.02182044788594445  ,-0.0048922061955545253,0.014495749034546465 ,0.029903309975813537 ,0.036812629499157618 ,0.032810481679883027 ,0.017566506126723273 ,-0.0073838480076835493,-0.039024878786643881 ,-0.073372075424519775 ,-0.10605488198665042  ,-0.13290947589151741  ,-0.15051956650249923  ,0.84335121649430678  ,-0.15051956650249923  ,-0.13290947589151741  ,-0.10605488198665042  ,-0.073372075424519775 ,-0.039024878786643881 ,-0.0073838480076835493,0.017566506126723273 ,0.032810481679883027 ,0.036812629499157618 ,0.029903309975813537 ,0.014495749034546465 ,-0.0048922061955545253,-0.02182044788594445  ,-0.028303577666037801 ,-0.015356073285987629 ,0.026334761341238758] ;
Signal_to_process=imfilter(Signal_to_process,D_wall_filters_5(:));

%FFT part. Every time we take 128 samples from the signal data and windows
%it with the Kaiser window, and then process it in a 256*1 zero padding
%matrix and then do the FFT. Don't forget to FFTshift the data after FFT.
%After that, we jump 16 samples and do the next FFT, and repeat until the
%end.
for now_position=1:100000
    start_position=1+(now_position-1)*d;
    if start_position>Allfileslength(1,1)
        break;
    end
    end_position=start_position+Samplesize-1;
    if end_position>Allfileslength(1,1)
        end_position=Allfileslength(1,1);
    end
    zero_padding_matrix=zeros(FFT_size,1);
    window_=window(@kaiser, Samplesize, beta);
    for i=start_position:end_position
        zero_padding_matrix(i-start_position+1,1)=Signal_to_process(i,1)*window_(i-start_position+1,1);
    end
    zero_padding_matrix=fft(zero_padding_matrix);
    zero_padding_matrix=fftshift(zero_padding_matrix);
    for i=1:256
        processed_signal(i,now_position)=zero_padding_matrix(i,1);
    end
end
processed_signal=abs(processed_signal);
length_of_processed_signal=size(processed_signal);

%In the end we show the image , the dynamic range is from 31 to 539. The graph
%is not bad, but we think we can do better.
%If we do not do the log compression, we get the power.
for i=1:length_of_processed_signal(1,2)
    for j=1:FFT_size
        processed_signal(j,i)=D*log10(processed_signal(j,i))+G;
    end
end


%Calculates max velocity
PRF_Hz=3800;
jump_sec=d/PRF_Hz;
sample_length_sec=bandwidth*2/PRF_Hz;
frequency_axis=linspace(-1,1,256);
frequency_axis_Hz=linspace(-PRF_Hz/2, PRF_Hz/2, 256);
c=1540e2;
assumed_angle_deg=55;
velocity_axis=frequency_axis*pi*c*(PRF_Hz)/(2*pi*2*frenq)/cosd(assumed_angle_deg);
time_axis=sample_length_sec/2+linspace(0,jump_sec*length_of_processed_signal(1,2),length_of_processed_signal(1,2));
%and we calculate the speed of the centroid part, add them together to get
%the final volume flow speed.
% for time_index=1:length_of_processed_signal(1,2)
%     powersum=0;
%     for i=1:256
%         powersum=powersum+processed_signal(i,time_index);
%     end
%     tempsum=0;
%     for i=1:256
%         tempsum=tempsum+processed_signal(i,time_index)*velocity_axis(i,1);
%     end
%     vfspeed(time_index, 1)=vfspeed(time_index, 1)+pi*(tempsum/powersum);
% end

% %Display area where all functions showing the graph is declared.
% imshow(processed_signal,[downrange uprange]);
spectrum_power=spectrum_power';
plot(spectrum_power);
imshow(spectrum_power,[10000 15000]);
% imagesc(time_axis,velocity_axis,processed_signal,[downrange uprange]);



